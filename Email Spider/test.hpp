/*******************************************************************************
* FILE: test.h                                                                 *
*                                                                              *                                                                                     *
* DESCRIPTION: test.hpp is a header file for testing functions in spider.cpp.  *
* To run tests, simply include test.hpp and call runTests() from within the    *
* main. This is already done by calling ./emailSpider --test.                  *                                                                        *
*                                                                              *
* OUTPUT FILE: None                                                            *
*******************************************************************************/

#ifndef TEST_HPP
#define TEST_HPP

#include "spider.hpp"

/*******************************************************************************
* FUNCTION: test_find_emails()                                                 *
*                                                                              * 
* DESCRIPTION: test_find_emails() tests to see if find_emails() finds the      *
* correct email addresses from a variety of test cases. The corect solutions   *
* have been manually extracted from the test strings and placed in a text file.*
* This file is compared to the one that is generated by find_emails() to test  *
* for accuracy. The result is printed.                                         *
*                                                                              *
* PARAMETERS: None                                                             *
*******************************************************************************/

void test_find_emails()
{
    int test_counter = 1, num_tests;
    std::fstream test_file, correct_file;
    std::string test1 = "gwis@gmail.com test2@yahoo.com",
                test2 = "test this thing",
                test3 = "capachone@gmail.com",
                test4 = "a@wwwwww.0000",
                test5 = "chapo.guzman@root.de",
                test6 = "<a href=\"mailto:aakinola@pvcc.edu\">",
                test_string,
                correct_string;   
                
    test_file.open("testing/test_find_emails.txt", std::ios::in | std::ios::out);
    correct_file.open("testing/correct_find_emails.txt");
  
    find_emails(test1, test_file);
    test_file << "#\n";
    find_emails(test2, test_file);
    test_file << "#\n";
    find_emails(test3, test_file);
    test_file << "#\n";
    find_emails(test4, test_file);
    test_file << "#\n";
    find_emails(test5, test_file);
    test_file << "#\n";
    find_emails(test6, test_file);
    test_file << "#\n";
    num_tests = 6;
    
    test_file.clear();
    test_file.seekg(0, std::ios::beg);
    
    std::cout << std::setw(18) << "EXPECTED" << std::setw(32) << "ACTUAL " 
              << std::setw(28) << " STATUS\n" << std::endl;
    
    do
    {
        test_file >> test_string;
        correct_file >> correct_string;
        std::cout << "Test " << test_counter << ":  " << std::endl;

        
        if(test_string == "#" && correct_string == "#")
        {
            std::cout << "          " << std::left << std::setw(33) 
                      << "N/A" << std::setw(28) << "N/A"
                      << "PASS" << std::endl;
        }
        else
        {
            while(test_string != "#" || correct_string != "#")
            {                
                if(test_string != correct_string)
                {
                    if(test_string == "#")
                        std::cout << "          " << std::left << std::setw(33)
                                  << correct_string << std::setw(28) 
                                  << "N/A" << "FAIL" << std::endl;
                    
                    else
                        std::cout << "          " << std::left << std::setw(33)
                                  << correct_string << std::setw(28) 
                                  << test_string<< "FAIL" << std::endl;
                }
                else
                    std::cout << "          " << std::left << std::setw(33) 
                              << correct_string << std::setw(28) << test_string
                              << "PASS" << std::endl;
                                                        
                if(test_string != "#")
                    test_file >> test_string;
            
                if(correct_string != "#")
                    correct_file >> correct_string;
            }
        }
        test_counter++;
        std::cout << std::endl;
    }while(!(test_counter > num_tests));
        
    test_file.close();
    correct_file.close();
}



/*******************************************************************************
* FUNCTION: test_find_subdirectories()                                         *
*                                                                              *
* DESCRIPTION: test_find_subdirectories() tests to see if find_subdirectories( *
* finds the correct subdirectories from a variety of test cases. The corect    *
* solutions have been stored in a file. This is compared to the results that   *
* are generated from findSubdirectories().                                     *
*                                                                              *
* PARAMETERS: None                                                             *
*******************************************************************************/

void test_find_subdirectories()
{
    int test_counter = 1;
    std::map<std::string, int> visited_directories;
    std::deque<st_subdirectory> test_subdirectories, correct_subdirectories;
    std::fstream correct_file;
    std::string hostname = "reddit.com";
    std::string test1 = "href=\"/feed/history/search_history\"",
                test2 = "android-app://com.reddit.android.youtube/http/"
                        "www.youtube.com/watch?v=DAhtOhaQvk4",
                test3 = "<li><a href=\"/search.aspx?browse=133\"",
                test4 = "ybez News\" href=\"/latestNews.rss\"",
                test5 = "Items\" href=\"/latestAdditions_1.rss\" /",
                test6 = "href=\"index.html\"",
                test7 = " href=\"http://www.zybez.net/news/825/patch_notes___ju"
                        "ly_19_2010/\" /><link rel=\"",
                test8 = "href=\"/img/test.png\"",
                test_string;
                
    find_subdirectories(test1, hostname, test_subdirectories, 
                        visited_directories);
    find_subdirectories(test2, hostname, test_subdirectories, 
                        visited_directories);
    find_subdirectories(test3, hostname, test_subdirectories, 
                        visited_directories);
    find_subdirectories(test4, hostname, test_subdirectories, 
                        visited_directories);
    find_subdirectories(test5, hostname, test_subdirectories, 
                        visited_directories);
    find_subdirectories(test6, hostname, test_subdirectories,
                        visited_directories);
    find_subdirectories(test7, hostname, test_subdirectories,
                        visited_directories);
    find_subdirectories(test8, hostname, test_subdirectories,
                        visited_directories);


    correct_file.open("testing/correctFindSubdirectories.txt");  
    
    std::cout << std::right << std::setw(18) << "EXPECTED" << std::setw(32)
              << "ACTUAL " << std::setw(28) << " STATUS\n" << std::endl;
    
    while(correct_file >> test_string)
    {
        std::cout << "\nTest " << test_counter << ":  " << std::endl;
        if(test_string == "#")
        {
            std::cout << std::right << std::setw(75) << "UNCT" << std::endl;
            test_counter++;
            continue;
        }
        if(test_subdirectories.size() != 0 && 
           test_string == test_subdirectories.front().subdirectory)
        {   
            std::cout << "          " << std::left << std::setw(33) 
                      << test_string << std::setw(28) 
                      << test_subdirectories.front().subdirectory << "PASS" 
                      << std::endl;
        }
        else if(test_subdirectories.size() == 0)
        {
            std::cout << "          " << std::left << std::setw(33) 
                      << test_string << std::setw(28) 
                      << "#" << "FAIL"
                      << std::endl;
        }
        else
        {
            std::cout << "          " << std::left << std::setw(33) 
                      << test_string << std::setw(28) 
                      << test_subdirectories.front().subdirectory << "FAIL"
                      << std::endl;
        }
        if(test_subdirectories.size() != 0)
            test_subdirectories.pop_front();
        test_counter++;
    }
}



/*******************************************************************************
* FUNCTION: test_find_urls()                                                   *
*                                                                              *
* DESCRIPTION: test_find_urls() tests to see if find_urls() finds the correct  *
* urls from a variety of test cases. The corect solutions have been            *
* stored in a file. This is compared to the results that are generated from    *
* find_urls().                                                                 *
*                                                                              *
* PARAMETERS: None                                                             *
*******************************************************************************/

void test_find_urls()
{
    int test_counter = 1;
    std::deque<st_url> test_urls, correct_urls;
    std::fstream correct_file;
    std::string test1 = "http://www.google.com/test/test1", 
                test2 = "https://www.reddit.com/test", 
                test3 = "test3",
                test4 = "http://www.test4.com",
                test5 = "http://www.test5.com/one/",
                test6 = "www.example.com",
                test7 = "www.example.com/",
                test8 = "http://fonts.googleapis.com/css?family=Fenix",
                test_string;
                
    find_urls(test1, test_urls);
    find_urls(test2, test_urls);
    find_urls(test3, test_urls);
    find_urls(test4, test_urls);
    find_urls(test5, test_urls);
    find_urls(test6, test_urls);
    find_urls(test7, test_urls);  
    find_urls(test8, test_urls);
    
    correct_file.open("testing/correctfind_urls.txt");    
    
    std::cout << std::right << std::setw(18) << "EXPECTED" << std::setw(32)
              << "ACTUAL " << std::setw(28) << " STATUS\n" << std::endl;
    
    while(correct_file >> test_string)
    {
        std::cout << "\nTest " << test_counter << ":  " << std::endl;
        if(test_string == "#")
        {
            std::cout << std::right << std::setw(75) << "PASS" << std::endl;
            test_counter++;
            continue;
        }
        if(test_string == test_urls.front().hostname)
        { 
            std::cout << "          " << std::left << std::setw(33) 
                      << test_string << std::setw(28) 
                      << test_urls.front().hostname << "PASS" << std::endl;
            correct_file >> test_string;

            if(test_string == test_urls.front().subdirectory)
                std::cout << "          " << std::left << std::setw(33) 
                          << test_string << std::setw(28) 
                          << test_urls.front().subdirectory << "PASS"
                          << std::endl;
            else
                std::cout << "           " << std::left << std::setw(33) 
                      << test_string << std::setw(28) 
                      << test_urls.front().subdirectory << "FAIL" << std::endl;
        }
        else
        {
            std::cout << "          " << std::left << std::setw(33) 
                      << test_string << std::setw(28) 
                      << test_urls.front().hostname << "FAIL" << std::endl;
            correct_file >> test_string;
            std::cout << "          " << std::left << std::setw(33) 
                      << test_string << std::setw(28) 
                      << test_urls.front().subdirectory << "FAIL" << std::endl;
        }
        if(test_urls.size() != 0)
            test_urls.pop_front();
        test_counter++;
    }
}



/*******************************************************************************
* FUNCTION: test_obtain_get_response()                                         *
*                                                                              *
* DESCRIPTION: test_obtain_get_response() tests to see if obtain_get_response()*
* finds the correct urls from a variety of test cases. The corect solutions    *
* have been manually extracted from the test strings and placed in a text      *
* file. This file is compared to the one that is generated by find_urls()      *
* to test for accuracy. The result is printed.                                 *
*                                                                              *
* PARAMETERS: None                                                             *
*******************************************************************************/

void test_obtain_get_response()
{
    std::string test_site_1 = "", 
                test_site_2 = "";
}



/*******************************************************************************
* FUNCTION: run_tests()                                                        *
*                                                                              *
* DESCRIPTION: Runs all of the tests that are avaiable in the testing module.  *
*                                                                              *
* PARAMETERS: None                                                             *
*******************************************************************************/

void run_tests()
{
    std::cout << "\n\nBeginning testing of emailSpider functions." << std::endl;
    
    std::cout << "\n\nTesting find_emails():\n" << std::endl;
    test_find_emails();
    
    std::cout << "\n\nTesting find_subdirectories():\n" << std::endl;
    test_find_subdirectories();
    
    std::cout << "\n\nTesting find_urls():\n" << std::endl;
    test_find_urls();
}

#endif
